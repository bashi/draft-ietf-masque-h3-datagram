



MASQUE                                                       D. Schinazi
Internet-Draft                                                Google LLC
Intended status: Standards Track                               L. Pardue
Expires: 13 October 2021                                      Cloudflare
                                                           11 April 2021


                    Using QUIC Datagrams with HTTP/3
                  draft-ietf-masque-h3-datagram-latest

Abstract

   The QUIC DATAGRAM extension provides application protocols running
   over QUIC with a mechanism to send unreliable data while leveraging
   the security and congestion-control properties of QUIC.  However,
   QUIC DATAGRAM frames do not provide a means to demultiplex
   application contexts.  This document describes how to use QUIC
   DATAGRAM frames when the application protocol running over QUIC is
   HTTP/3.  It associates datagrams with client-initiated bidirectional
   streams and defines an optional additional demultiplexing layer.

   Discussion of this work is encouraged to happen on the MASQUE IETF
   mailing list (masque@ietf.org (mailto:masque@ietf.org)) or on the
   GitHub repository which contains the draft: https://github.com/ietf-
   wg-masque/draft-ietf-masque-h3-datagram.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 13 October 2021.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction
     1.1.  Conventions and Definitions
   2.  Multiplexing
   3.  Datagram Flows
     3.1.  Flow ID Allocation
   4.  HTTP/3 DATAGRAM Frame Format
   5.  Registering Flow IDs
   6.  The H3_DATAGRAM HTTP/3 SETTINGS Parameter
   7.  RELIABLE_DATAGRAM HTTP/3 Frame Definition
   8.  HTTP/1.x and HTTP/2 Support
   9.  HTTP Intermediaries
   10. Security Considerations
   11. IANA Considerations
     11.1.  HTTP SETTINGS Parameter
     11.2.  Flow Extension Keys
   12. Normative References
   Appendix A.  Examples
     A.1.  CONNECT-UDP
     A.2.  CONNECT-UDP with ECN
     A.3.  CONNECT-IP with IP compression
     A.4.  WebTransport
   Acknowledgments
   Authors' Addresses

1.  Introduction

   The QUIC DATAGRAM extension [DGRAM] provides application protocols
   running over QUIC [QUIC] with a mechanism to send unreliable data
   while leveraging the security and congestion-control properties of
   QUIC.  However, QUIC DATAGRAM frames do not provide a means to
   demultiplex application contexts.  This document describes how to use
   QUIC DATAGRAM frames when the application protocol running over QUIC
   is HTTP/3 [H3].  It associates datagrams with client-initiated
   bidirectional streams and defines an optional additional
   demultiplexing layer.

   This design mimics the use of Stream Types in HTTP/3, which provide a
   demultiplexing identifier at the start of each unidirectional stream.

   Discussion of this work is encouraged to happen on the MASQUE IETF
   mailing list (masque@ietf.org (mailto:masque@ietf.org)) or on the
   GitHub repository which contains the draft: https://github.com/ietf-
   wg-masque/draft-ietf-masque-h3-datagram.

1.1.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  Multiplexing

   In order to allow multiple datagram types and contexts to coexist on
   a given QUIC connection, HTTP datagrams contain two layers of
   multiplexing.  First, the QUIC DATAGRAM frame payload starts with a
   custom-encoded stream identifier that associates the datagram with a
   given QUIC stream.  Second, datagrams carry a flow ID that allows
   multiplexing multiple datagram flows related to a given HTTP request.
   Conceptually, the first layer of multiplexing is per-hop, while the
   second is end-to-end (see Section 3).

3.  Datagram Flows

   Flows are unirectional exchanges of datagrams associated with a given
   HTTP request.  Flows are identified within a request context by a
   numeric value, referred to as the flow ID.  A flow ID is a 62-bit
   integer (0 to 2^62-1).  Note that the flow ID value of zero is
   reserved for registration purposes (see Section 5).

   While stream IDs are a per-hop concept, flow IDs are an end-to-end
   concept.  In other words, if a datagram travels through multiple
   intermediaries on its way from client to server, the stream ID will
   most likely change from hop to hop, but the flow ID will remain the
   same.  Flow IDs are opaque to intermediaries.

3.1.  Flow ID Allocation

   Implementations of HTTP/3 that support the DATAGRAM extension MUST
   provide a flow ID allocation service.  That service will allow
   applications co-located with HTTP/3 to request a unique flow ID that
   they can subsequently use for their own purposes.  The HTTP/3
   implementation will then parse the flow ID of incoming DATAGRAM
   frames and use it to deliver the frame to the appropriate application
   context.  Note that the flow ID namespace is tied to a given HTTP
   request: it is possible for the same numeral flow ID to be used
   simultaneously in distinct requests.

4.  HTTP/3 DATAGRAM Frame Format

   When used with HTTP/3, the Datagram Data field of QUIC DATAGRAM
   frames uses the following format (using the notation from the
   "Notational Conventions" section of [QUIC]):

   HTTP/3 DATAGRAM Frame {
     Quarter Stream ID (i),
     Flow ID (i),
     HTTP/3 Datagram Payload (..),
   }

                   Figure 1: HTTP/3 DATAGRAM Frame Format

   Quarter Stream ID:  A variable-length integer that contains the value
      of the client-initiated bidirectional stream that this datagram is
      associated with, divided by four.  (The division by four stems
      from the fact that HTTP requests are sent on client-initiated
      bidirectional streams, and those have stream IDs equal to zero
      modulo four.)

   Flow ID:  A variable-length integer indicating the Flow ID of the
      datagram (see Section 3).

   HTTP/3 Datagram Payload:  The payload of the datagram, whose
      semantics are defined by individual applications.  Note that this
      field can be empty.

   Endpoints MUST treat receipt of a DATAGRAM frame whose payload is too
   short to parse the Quarter Stream ID or Flow ID as an HTTP/3
   connection error of type H3_GENERAL_PROTOCOL_ERROR.

5.  Registering Flow IDs

   On all streams, flow ID zero is reserved for registration of other
   flow IDs.  This allows the endpoint to inform its peer of the
   encoding and semantics of upcoming datagrams.  Datagrams with flow ID
   set to zero contain the following HTTP/3 Datagram Payload:

   Flow ID Registration {
     Registered Flow ID (i),
     Extension String (..),
   }

                   Figure 2: Flow ID Registration Format

   Registered Flow ID:  The flow ID to register and associate with the
      corresponding extension string.

   Extension String:  A string of comma-separated key-value pairs to
      enable extensibility.

   The ABNF for the Extension String field is as follows (using syntax
   from Section 3.2.6 of [RFC7230]):

     extension-string = [ ext-member *( "," ext-member ) ]
     ext-member       = ext-member-key "=" ext-member-value
     ext-member-key   = token
     ext-member-value = token

   Note that these registrations are unilateral and unidirectional: the
   sender of the frame unilateraly defines the semantics it will apply
   to the datagrams it sends.  If a mechanism using this feature wants
   to send datagrams of a given flow ID in both directions, this frame
   will need to be exchanged in both directions.

   Note that while this registration MAY be sent using QUIC DATAGRAM
   frames, endpoints SHOULD instead send it using the RELIABLE_DATAGRAM
   HTTP/3 frame to ensure it is retransmitted if lost.

6.  The H3_DATAGRAM HTTP/3 SETTINGS Parameter

   Implementations of HTTP/3 that support this mechanism can indicate
   that to their peer by sending the H3_DATAGRAM SETTINGS parameter with
   a value of 1.  The value of the H3_DATAGRAM SETTINGS parameter MUST
   be either 0 or 1.  A value of 0 indicates that this mechanism is not
   supported.  An endpoint that receives the H3_DATAGRAM SETTINGS
   parameter with a value that is neither 0 or 1 MUST terminate the
   connection with error H3_SETTINGS_ERROR.

   An endpoint that sends the H3_DATAGRAM SETTINGS parameter with a
   value of 1 MUST send the max_datagram_frame_size QUIC Transport
   Parameter [DGRAM].  An endpoint that receives the H3_DATAGRAM
   SETTINGS parameter with a value of 1 on a QUIC connection that did
   not also receive the max_datagram_frame_size QUIC Transport Parameter
   MUST terminate the connection with error H3_SETTINGS_ERROR.

   When clients use 0-RTT, they MAY store the value of the server's
   H3_DATAGRAM SETTINGS parameter.  Doing so allows the client to use
   HTTP/3 datagrams in 0-RTT packets.  When servers decide to accept
   0-RTT data, they MUST send a H3_DATAGRAM SETTINGS parameter greater
   than or equal to the value they sent to the client in the connection
   where they sent them the NewSessionTicket message.  If a client
   stores the value of the H3_DATAGRAM SETTINGS parameter with their
   0-RTT state, they MUST validate that the new value of the H3_DATAGRAM
   SETTINGS parameter sent by the server in the handshake is greater
   than or equal to the stored value; if not, the client MUST terminate
   the connection with error H3_SETTINGS_ERROR.  In all cases, the
   maximum permitted value of the H3_DATAGRAM SETTINGS parameter is 1.

7.  RELIABLE_DATAGRAM HTTP/3 Frame Definition

   The RELIABLE_DATAGRAM frame (type=TBD) is used to send datagrams over
   QUIC streams when QUIC datagrams are unavailable or undesirable.
   Datagrams transmitted over streams using this frame have the same
   semantics as datagrams sent over the QUIC DATAGRAM frame.  The
   RELIABLE_DATAGRAM frame does not carry the Quarter Stream ID field
   because the Stream ID can be infered from the QUIC STREAM frames that
   carry this HTTP/3 frame.

   RELIABLE_DATAGRAM Frame {
     Type (i) = TBD,
     Length (i),
     Flow ID (i),
     HTTP/3 Datagram Payload (..),
   }

              Figure 3: RELIABLE_DATAGRAM HTTP/3 Frame Format

   The Type and Length fields follows the definition of HTTP/3 frames
   from [H3].  The payload consists of:

   Flow ID:  A variable-length integer indicating the Flow ID of the
      datagram (see Section 3).

   HTTP/3 Datagram Payload:  The payload of the datagram, whose
      semantics are defined by individual applications.  Note that this
      field can be empty.

8.  HTTP/1.x and HTTP/2 Support

   We can provide DATAGRAM support in HTTP/2 by defining the
   RELIABLE_DATAGRAM frame in HTTP/2.

   We can provide DATAGRAM support in HTTP/1.x by defining its data
   stream format to a sequence of length-value datagrams.

   TODO: Refactor this document into "HTTP Datagrams" with definitions
   for HTTP/1.x, HTTP/2, and HTTP/3.

9.  HTTP Intermediaries

   HTTP/3 DATAGRAM flows are specific to a given HTTP/3 connection.
   However, in some cases, an HTTP request may travel across multiple
   HTTP connections if there are HTTP intermediaries involved; see
   Section 2.3 of [RFC7230].

   If an intermediary has sent the H3_DATAGRAM SETTINGS parameter with a
   value of 1 on its client-facing connection, it MUST inspect all HTTP
   requests from that connection and check for the presence of the
   "Datagram-Flow-Id" header field.  If the HTTP method of the request
   is not supported by the intermediary, it MUST remove the "Datagram-
   Flow-Id" header field before forwarding the request.  If the
   intermediary supports the method, it MUST either remove the header
   field or adhere to the requirements leveraged by that method on
   intermediaries.

   If an intermediary has sent the H3_DATAGRAM SETTINGS parameter with a
   value of 1 on its server-facing connection, it MUST inspect all HTTP
   responses from that connection and check for the presence of the
   "Datagram-Flow-Id" header field.  If the HTTP method of the request
   is not supported by the intermediary, it MUST remove the "Datagram-
   Flow-Id" header field before forwarding the response.  If the
   intermediary supports the method, it MUST either remove the header
   field or adhere to the requirements leveraged by that method on
   intermediaries.

   If an intermediary processes distinct HTTP requests that refer to the
   same flow ID in their respective "Datagram-Flow-Id" header fields, it
   MUST ensure that those requests are routed to the same backend.

10.  Security Considerations

   This document does not have additional security considerations beyond
   those defined in [QUIC] and [DGRAM].

11.  IANA Considerations

11.1.  HTTP SETTINGS Parameter

   This document will request IANA to register the following entry in
   the "HTTP/3 Settings" registry:

     +--------------+-------+---------------+---------+
     | Setting Name | Value | Specification | Default |
     +==============+=======+===============+=========+
     | H3_DATAGRAM  | 0x276 | This Document |    0    |
     +--------------+-------+---------------+---------+

11.2.  Flow Extension Keys

   This document will request IANA to create an "HTTP Datagram Flow
   Extension Keys" registry.  Registrations in this registry MUST
   include the following fields:

   Key:  The key (see Section 5).  Keys MUST be valid tokens as defined
      in Section 3.2.6 of [RFC7230].

   Description:  A brief description of the key semantics, which MAY be
      a summary if a specification reference is provided.

   Reference:  An optional reference to a specification for the
      parameter.  This field MAY be empty.

   Registrations follow the "First Come First Served" policy (see
   Section 4.4 of [IANA-POLICY]) where two registrations MUST NOT have
   the same Key. This registry is initially empty.

12.  Normative References

   [DGRAM]    Pauly, T., Kinnear, E., and D. Schinazi, "An Unreliable
              Datagram Extension to QUIC", Work in Progress, Internet-
              Draft, draft-ietf-quic-datagram-02, 16 February 2021,
              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
              datagram-02.txt>.

   [H3]       Bishop, M., "Hypertext Transfer Protocol Version 3
              (HTTP/3)", Work in Progress, Internet-Draft, draft-ietf-
              quic-http-34, 2 February 2021,
              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
              http-34.txt>.

   [IANA-POLICY]
              Cotton, M., Leiba, B., and T. Narten, "Guidelines for
              Writing an IANA Considerations Section in RFCs", BCP 26,
              RFC 8126, DOI 10.17487/RFC8126, June 2017,
              <https://datatracker.ietf.org/doc/html/rfc8126>.

   [QUIC]     Iyengar, J. and M. Thomson, "QUIC: A UDP-Based Multiplexed
              and Secure Transport", Work in Progress, Internet-Draft,
              draft-ietf-quic-transport-34, 14 January 2021,
              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
              transport-34.txt>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://datatracker.ietf.org/doc/html/rfc2119>.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <https://datatracker.ietf.org/doc/html/rfc7230>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://datatracker.ietf.org/doc/html/rfc8174>.

Appendix A.  Examples

A.1.  CONNECT-UDP

   Client                                             Server

   STREAM(44): DATA{HEADERS}      -------->
     :method = CONNECT-UDP
     :scheme = https
     :path = /
     :authority = target.example.org:443

   STREAM(44): RELIABLE_DATAGRAM  -------->
     Flow ID = 0 (registration)
     Registered Flow ID = 1
     Extension String = ""

   DATAGRAM                       -------->
     Quarter Stream ID = 11
     Flow ID = 1
     Payload = Encapsulated UDP Payload

              <--------  STREAM(44): DATA{HEADERS}
                           :status = 200

              <--------  STREAM(44): RELIABLE_DATAGRAM
                           Flow ID = 0 (registration)
                           Registered Flow ID = 1
                           Extension String = ""

   /* Wait for target server to respond to UDP packet. */

              <--------  DATAGRAM
                           Quarter Stream ID = 11
                           Flow ID = 1
                           Payload = Encapsulated UDP Payload

A.2.  CONNECT-UDP with ECN

   Client                                             Server

   STREAM(44): DATA{HEADERS}      -------->
     :method = CONNECT-UDP
     :scheme = https
     :path = /
     :authority = target.example.org:443

   STREAM(44): RELIABLE_DATAGRAM  -------->
     Flow ID = 0 (registration)
     Registered Flow ID = 1
     Extension String = ""

   DATAGRAM                       -------->
     Quarter Stream ID = 11
     Flow ID = 1
     Payload = Encapsulated UDP Payload

              <--------  STREAM(44): DATA{HEADERS}
                           :status = 200

              <--------  STREAM(44): RELIABLE_DATAGRAM
                           Flow ID = 0 (registration)
                           Registered Flow ID = 1
                           Extension String = ""

   /* Wait for target server to respond to UDP packet. */

              <--------  DATAGRAM
                           Quarter Stream ID = 11
                           Flow ID = 1
                           Payload = Encapsulated UDP Payload

   STREAM(44): RELIABLE_DATAGRAM  -------->
     Flow ID = 0 (registration)
     Registered Flow ID = 2
     Extension String = "ecn=ect0"

   DATAGRAM                       -------->
     Quarter Stream ID = 11
     Flow ID = 2
     Payload = Encapsulated UDP Payload

A.3.  CONNECT-IP with IP compression

   Client                                             Server

   STREAM(44): DATA{HEADERS}      -------->
     :method = CONNECT-IP
     :scheme = https
     :path = /
     :authority = proxy.example.org:443

              <--------  STREAM(44): DATA{HEADERS}
                           :status = 200

   /* Exchange CONNECT-IP configuration information. */

   STREAM(44): RELIABLE_DATAGRAM  -------->
     Flow ID = 0 (registration)
     Registered Flow ID = 1
     Extension String = ""

   DATAGRAM                       -------->
     Quarter Stream ID = 11
     Flow ID = 1
     Payload = Encapsulated IP Packet

              <--------  STREAM(44): RELIABLE_DATAGRAM
                           Flow ID = 0 (registration)
                           Registered Flow ID = 1
                           Extension String = ""

   /* Endpoint happily exchange encapsulated IP packets. */

   DATAGRAM                       -------->
     Quarter Stream ID = 11
     Flow ID = 1
     Payload = Encapsulated IP Packet

   /* After performing some analysis on traffic patterns, */
   /* the client decides it wants to compress a 5-tuple. */

   STREAM(44): RELIABLE_DATAGRAM  -------->
     Flow ID = 0 (registration)
     Registered Flow ID = 2
     Extension String = "ip=192.0.2.42,port=443"

   DATAGRAM                       -------->
     Quarter Stream ID = 11
     Flow ID = 2
     Payload = Compressed IP Packet

A.4.  WebTransport

   Client                                             Server

   STREAM(44): DATA{HEADERS}      -------->
     :method = CONNECT
     :scheme = https
     :method = webtransport
     :path = /hello
     :authority = webtransport.example.org:443
     Origin = https://www.example.org:443

   STREAM(44): RELIABLE_DATAGRAM  -------->
     Flow ID = 0 (control flow)
     Registered Flow ID = 1
     Extension String = ""

              <--------  STREAM(44): DATA{HEADERS}
                           :status = 200

              <--------  STREAM(44): RELIABLE_DATAGRAM
                           Flow ID = 0 (registration)
                           Registered Flow ID = 1
                           Extension String = ""

   /* Both endpoints can now send WebTransport datagrams. */

Acknowledgments

   The DATAGRAM flow identifier was previously part of the DATAGRAM
   frame definition itself, the author would like to acknowledge the
   authors of that document and the members of the IETF MASQUE working
   group for their suggestions.  Additionally, the author would like to
   thank Martin Thomson for suggesting the use of an HTTP/3 SETTINGS
   parameter.  Furthermore, the authors would like to thank Ben Schwartz
   for writing the first proposal that used two layers of indirection.

Authors' Addresses

   David Schinazi
   Google LLC
   1600 Amphitheatre Parkway
   Mountain View, California 94043,
   United States of America

   Email: dschinazi.ietf@gmail.com


   Lucas Pardue
   Cloudflare

   Email: lucaspardue.24.7@gmail.com
